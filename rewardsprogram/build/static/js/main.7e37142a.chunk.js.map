{"version":3,"sources":["Features/UserRewards.tsx","Features/UserTransactions.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserRewards","props","calculateRewards","transaction","totalevaluatedpoints","amount","console","log","Date","transactionDate","getMonth","toISOString","key","transactionid","toString","className","remarks","transactions","newdata","Map","iterator","data","has","value","get","isNullOrUndefined","set","total","values","this","getUserRewards","Transactions","id","length","map","x","React","Component","user","currency","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RA+FeA,E,YAnFb,WAAYC,GAA0B,IAAD,8BACnC,4CAAMA,KA2BAC,iBAAmB,SAACC,GAC1B,IACIC,EAAuB,EAa3B,OAXEA,EADED,EAAYE,OAAS,KAEpBF,EAAYE,OAAS,GAAKF,EAAYE,OAAS,GAAK,GAJ3B,GAKzBF,EAAYE,OAAS,KAGtBF,EAAYE,OAAS,GAAKF,EAAYE,OAAS,GAAK,EAGxDC,QAAQC,IAAI,IAAIC,KAAKL,EAAYM,iBAAiBC,YAClDJ,QAAQC,KAAI,IAAIC,MAAOG,eAGrB,yBAAKC,IAAKT,EAAYU,cAAcC,YAClC,yBAAKC,UAAU,sBAAf,qBACqBZ,EAAYM,iBAEjC,yBAAKM,UAAU,sBAAf,wBACwBZ,EAAYa,SAEpC,yBAAKD,UAAU,sBAAf,uBACuBZ,EAAYE,QAEnC,yBAAKU,UAAU,sBAAf,mBACmBX,GAEnB,gCAzD+B,E,4EAIda,GACrB,IAAIC,EAA+B,IAAIC,IADe,uBAEtD,YAAuBF,EAAvB,+CAAqC,CAAC,IAA3BG,EAA0B,QAC/BC,GACF,IAAIb,KAAKY,EAASX,iBAAiBC,WAAa,GAChDI,WACF,GAAKI,EAAQI,IAAID,GAEV,CACL,IAAIE,EAAQL,EAAQM,IAAIH,GACxBE,EAAQE,4BAAkBF,GAAS,EAAIA,EACvCL,EAAQQ,IAAIL,EAAME,EAAQH,EAASf,aAJnCa,EAAQQ,IAAIL,EAAMD,EAASf,SAPuB,kFAetDC,QAAQC,IAAIW,GACZ,IAAIS,EAAQ,EAhB0C,uBAkBtD,YAAgBT,EAAQU,SAAxB,+CAAkC,CAChCD,GADgC,SAlBoB,kFAqBtDrB,QAAQC,IAAIoB,K,+BAqCG,IAAD,OAGd,OAFAE,KAAKC,eAAeD,KAAK5B,MAAM8B,cAG7B,yBAAKC,GAAG,kBACLH,KAAK5B,MAAM8B,cAAgBF,KAAK5B,MAAM8B,aAAaE,OAAS,GAC3D,6BACE,kDAECJ,KAAK5B,MAAM8B,aAAaG,KAAI,SAAAC,GAEzB,OAAO,EAAKjC,iBAAiBiC,Y,GA1EnBC,IAAMC,WCuBjBC,EAlCF,CACXN,GAAI,KACJf,aAAc,CACZ,CACEJ,cAAe,EACfJ,gBAAiB,aACjBJ,OAAQ,IACRW,QAAS,UACTuB,SAAU,OAEZ,CACE1B,cAAe,EACfJ,gBAAiB,aACjBJ,OAAQ,IACRW,QAAS,SACTuB,SAAU,OAEZ,CACE1B,cAAe,EACfJ,gBAAiB,aACjBJ,OAAQ,IACRW,QAAS,UACTuB,SAAU,OAEZ,CACE1B,cAAe,EACfJ,gBAAiB,aACjBJ,OAAQ,IACRW,QAAS,SACTuB,SAAU,SCdDC,MATf,WAAgB,IACRvB,EAAiBqB,EAAjBrB,aACN,OACE,6BACE,kBAAC,EAAD,CAAac,aAAcd,MCEbwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.7e37142a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TransactionType from \"./TransactionType\";\r\nimport \"./UserRewards.css\";\r\nimport { isNullOrUndefined } from \"util\";\r\nimport UserRewardsData from \"./UserRewardsData\";\r\nimport { emitKeypressEvents } from \"readline\";\r\n\r\ninterface IUserRewardProps {\r\n  Transactions: TransactionType[];\r\n}\r\n\r\nclass UserRewards extends React.Component<IUserRewardProps> {\r\n  constructor(props: IUserRewardProps) {\r\n    super(props);\r\n  }\r\n\r\n  private getUserRewards(transactions: TransactionType[]) {\r\n    var newdata: Map<string, number> = new Map();\r\n    for (const iterator of transactions) {\r\n      let data: string = (\r\n        new Date(iterator.transactionDate).getMonth() + 1\r\n      ).toString();\r\n      if (!newdata.has(data)) {\r\n        newdata.set(data, iterator.amount);\r\n      } else {\r\n        let value = newdata.get(data);\r\n        value = isNullOrUndefined(value) ? 0 : value;\r\n        newdata.set(data, value + iterator.amount);\r\n      }\r\n    }\r\n\r\n    console.log(newdata);\r\n    let total = 0;\r\n\r\n    for (let key of newdata.values()) {\r\n      total = total + key;\r\n    }\r\n    console.log(total);\r\n  }\r\n\r\n  private calculateRewards = (transaction: TransactionType) => {\r\n    let rewardpointsMorethan100 = 2;\r\n    let totalevaluatedpoints = 0;\r\n    if (transaction.amount > 100) {\r\n      totalevaluatedpoints =\r\n        (transaction.amount > 50 ? transaction.amount - 50 : 0) +\r\n        (transaction.amount - 100) * rewardpointsMorethan100;\r\n    } else {\r\n      totalevaluatedpoints =\r\n        transaction.amount > 50 ? transaction.amount - 50 : 0;\r\n    }\r\n\r\n    console.log(new Date(transaction.transactionDate).getMonth());\r\n    console.log(new Date().toISOString());\r\n\r\n    return (\r\n      <div key={transaction.transactionid.toString()}>\r\n        <div className=\"ur-transactionItem\">\r\n          TrasanctionDate : {transaction.transactionDate}\r\n        </div>\r\n        <div className=\"ur-transactionItem\">\r\n          TrasanctionRemarks : {transaction.remarks}\r\n        </div>\r\n        <div className=\"ur-transactionItem\">\r\n          TrasanctionAmount : {transaction.amount}\r\n        </div>\r\n        <div className=\"ur-transactionItem\">\r\n          Points Earned : {totalevaluatedpoints}\r\n        </div>\r\n        <div></div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  public render() {\r\n    this.getUserRewards(this.props.Transactions);\r\n\r\n    return (\r\n      <div id=\"detailedReport\">\r\n        {this.props.Transactions && this.props.Transactions.length > 0 && (\r\n          <div>\r\n            <span>Detailed Rewards</span>\r\n\r\n            {this.props.Transactions.map(x => {\r\n              {\r\n                return this.calculateRewards(x);\r\n              }\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRewards;\r\n","const user = {\r\n  id: 1234,\r\n  transactions: [\r\n    {\r\n      transactionid: 1,\r\n      transactionDate: \"2020-01-01\",\r\n      amount: 120,\r\n      remarks: \"Walmart\",\r\n      currency: \"USD\"\r\n    },\r\n    {\r\n      transactionid: 2,\r\n      transactionDate: \"2020-01-01\",\r\n      amount: 120,\r\n      remarks: \"Costco\",\r\n      currency: \"USD\"\r\n    },\r\n    {\r\n      transactionid: 3,\r\n      transactionDate: \"2020-02-02\",\r\n      amount: 120,\r\n      remarks: \"Walmart\",\r\n      currency: \"USD\"\r\n    },\r\n    {\r\n      transactionid: 4,\r\n      transactionDate: \"2020-02-02\",\r\n      amount: 120,\r\n      remarks: \"Costco\",\r\n      currency: \"USD\"\r\n    }\r\n  ]\r\n};\r\n\r\nexport default user;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport UserRewards from \"./Features/UserRewards\";\nimport user from \"./Features/UserTransactions\";\n\nfunction App() {\n  let { transactions } = user;\n  return (\n    <div>\n      <UserRewards Transactions={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}